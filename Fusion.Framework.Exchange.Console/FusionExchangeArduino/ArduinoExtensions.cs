// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using ArduinoAPI;
using ArduinoAPI.Models;
using Microsoft.Rest;

namespace ArduinoAPI
{
    public static partial class ArduinoExtensions
    {
        /// <param name='operations'>
        /// Reference to the ArduinoAPI.IArduino.
        /// </param>
        public static IList<SalaDeReuniao> Get(this IArduino operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArduino)s).GetAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ArduinoAPI.IArduino.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<SalaDeReuniao>> GetAsync(this IArduino operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<ArduinoAPI.Models.SalaDeReuniao>> result = await operations.GetWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ArduinoAPI.IArduino.
        /// </param>
        /// <param name='idCliente'>
        /// Required.
        /// </param>
        public static IList<SalaDeReuniao> GetClienteByIdcliente(this IArduino operations, int idCliente)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArduino)s).GetClienteByIdclienteAsync(idCliente);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ArduinoAPI.IArduino.
        /// </param>
        /// <param name='idCliente'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<SalaDeReuniao>> GetClienteByIdclienteAsync(this IArduino operations, int idCliente, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<ArduinoAPI.Models.SalaDeReuniao>> result = await operations.GetClienteByIdclienteWithOperationResponseAsync(idCliente, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ArduinoAPI.IArduino.
        /// </param>
        /// <param name='token'>
        /// Required.
        /// </param>
        public static string LimparByToken(this IArduino operations, string token)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArduino)s).LimparByTokenAsync(token);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ArduinoAPI.IArduino.
        /// </param>
        /// <param name='token'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> LimparByTokenAsync(this IArduino operations, string token, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.LimparByTokenWithOperationResponseAsync(token, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ArduinoAPI.IArduino.
        /// </param>
        /// <param name='idCliente'>
        /// Required.
        /// </param>
        public static string LimparClienteByIdcliente(this IArduino operations, int idCliente)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArduino)s).LimparClienteByIdclienteAsync(idCliente);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ArduinoAPI.IArduino.
        /// </param>
        /// <param name='idCliente'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> LimparClienteByIdclienteAsync(this IArduino operations, int idCliente, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.LimparClienteByIdclienteWithOperationResponseAsync(idCliente, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ArduinoAPI.IArduino.
        /// </param>
        /// <param name='smtp'>
        /// Required.
        /// </param>
        /// <param name='haspeople'>
        /// Required.
        /// </param>
        public static string PostBySmtpAndHaspeople(this IArduino operations, string smtp, string haspeople)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArduino)s).PostBySmtpAndHaspeopleAsync(smtp, haspeople);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ArduinoAPI.IArduino.
        /// </param>
        /// <param name='smtp'>
        /// Required.
        /// </param>
        /// <param name='haspeople'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> PostBySmtpAndHaspeopleAsync(this IArduino operations, string smtp, string haspeople, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.PostBySmtpAndHaspeopleWithOperationResponseAsync(smtp, haspeople, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
